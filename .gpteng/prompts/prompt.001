An MVP for a game project according to the documents below.
Do not create the complete end product as described in the GDD and TDD.
Those documents are for background information only.
Implement only the features described in MVP requirements.

Here are the documents:

# Game Design Document: Infinite Multi-Player Online Minesweeper

## 1. Game Concept
Infinite Multi-Player Online Minesweeper is a unique twist on the classic Minesweeper game. Players join a shared, infinite game board to uncover tiles and avoid mines in a persistent, ever-expanding world.

## 2. Core Gameplay Mechanics

### 2.1 Game Board
- The game board is infinite and shared among all players.
- The board consists of tiles that can be either empty or contain a mine.
- Empty tiles display the number of adjacent mines (1-8) or are blank if no adjacent mines.

### 2.2 Player Actions
- Players can uncover tiles that are diagonally or orthogonally adjacent to tiles they've already uncovered.
- Players cannot uncover tiles that have been revealed by other players.

### 2.3 Joining the Game
- New players can join the game at any time.
- Each new player is assigned a unique, internal running player number.
- New players start at a random, safe location on the board:
  - The starting tile and its eight adjacent tiles must be free of mines.
  - The starting position should be relatively close to recent player activity.
  - The starting position is automatically uncovered to give the player a safe area to begin exploring.

### 2.4 Player Identification
- The game client assigns different colors to players.
- Colors are chosen to ensure easy distinction between players in close proximity, the all-time top player, and the three best currently active players.

### 2.5 Losing Conditions
- A player loses if they uncover a mine.
- A player also loses if they have no more adjacent tiles to uncover.
- After losing, a player's uncovered tiles remain on the board.
- To continue playing, a lost player must re-join as a new player.

### 2.6 Game Continuity
- The game never ends.
- Players can join, play, lose, and re-join indefinitely.
- The game board persists and expands as players uncover more tiles.

## 3. User Interface

### 3.1 Main Game Screen
- Displays the infinite game board, initially centered on the randomly chosen starting position.
- Shows uncovered tiles with numbers indicating adjacent mines.
- Represents different players with unique colors.

### 3.2 Player Information
- Shows the color, leaderboard position (always "1.") and score (number of tiles uncovered) of the all-time top player.
- Shows the color, leaderboard position and score of the best currently active player.
- Shows the player's color, current leaderboard position and score.

### 3.3 Controls
- Tap or click to uncover a tile.
- Pinch-to-zoom or scroll wheel to adjust view scale.
- Drag to pan the view.

## 4. Technical Considerations

### 4.1 Multiplayer Synchronization
- Real-time updates of tile states across all connected clients.
- Efficient data transfer to handle potentially large numbers of simultaneous players.

### 4.2 Infinite Board Generation
- Procedural generation of the game board as players explore new areas.
- Consistent mine placement algorithm to ensure the same board state for all players.

### 4.3 Performance Optimization
- Efficient rendering of the visible portion of the infinite board.
- Load balancing to handle multiple players in different areas of the board.

This GDD provides a foundation for developing the Infinite Multi-Player Online Minesweeper game. As development progresses, this document can be expanded and refined to include more detailed specifications and additional features.


# Technical Design Document: Infinite Multi-Player Online Minesweeper

## 1. System Architecture Overview

The Infinite Multi-Player Online Minesweeper game consists of two main components:
1. Server: Implemented in Rust
2. Client: Implemented in pure web technologies (HTML, CSS, JavaScript)

Communication between the server and client will use a simple, efficient protocol over WebSocket connections.

## 2. Server Architecture

### 2.1 Technology Stack
- Language: Rust
- WebSocket Library: tokio-tungstenite
- Database Abstraction: trait-based approach for flexibility

### 2.2 Core Components

#### 2.2.1 WebSocket Server
- Handles client connections and message routing
- Manages player sessions

#### 2.2.2 Game State Manager
- Maintains the current state of the game
- Processes player actions
- Generates and manages the infinite minefield

#### 2.2.3 Database Abstraction Layer
- Provides an interface for data storage and retrieval
- Allows for easy switching between different storage backends

#### 2.2.4 Player Manager
- Handles player join/rejoin logic
- Manages player status and information

### 2.3 Data Models

#### 2.3.1 Minefield
- Random seed (u64): Used to generate the minefield

#### 2.3.2 Uncovered Tile
- Position: (i64, i64)
- Timestamp: u32
- Player number: u32

#### 2.3.3 Player
- Player number: u32
- Join timestamp: u32
- Status: enum (Active, Lost)
- Last activity timestamp: u32
- Last uncovered tile position: (i64, i64)
- Tiles uncovered count: u32

### 2.4 Algorithms

#### 2.4.1 Minefield Generation
- Use the random seed to deterministically generate mine positions
- Implement a chunking system for efficient infinite board management

#### 2.4.2 Player Positioning
- Implement an algorithm to find a safe starting position for new players
- Consider recent player activity when selecting the position

### 2.5 Scalability Considerations
- Design the first version so a single server scales as far as possible

#### 2.5.1 Scalability Future Considerations
- Keep options open for scaling in the future, for example:
  - Implement a sharding system for the game world
  - Use a distributed database for storing game state
  - Implement load balancing for handling multiple game servers

## 3. Client Architecture

### 3.1 Technology Stack
- HTML5 (for structure)
- CSS3 (for styling)
- JavaScript (ES6+, for logic and interactivity)
- Canvas API (for rendering the game board)

### 3.2 Core Components

#### 3.2.1 Game Board Renderer
- Efficiently renders the visible portion of the infinite board
- Implements zooming and panning functionality

#### 3.2.2 Input Handler
- Manages user interactions (clicks, touches, zooming, panning)
- Translates user actions into game commands

#### 3.2.3 WebSocket Client
- Manages real-time communication with the server
- Handles connection status and reconnection attempts

#### 3.2.4 Game State Manager
- Maintains the local game state
- Synchronizes with server updates

#### 3.2.5 UI Manager
- Handles the user interface elements (score display, status messages, etc.)
- Manages responsive layout for different screen sizes

### 3.3 Optimization Techniques

#### 3.3.1 Tile Rendering
- Implement tile caching to reduce redraw operations
- Use offscreen canvas for improved performance

#### 3.3.2 Data Management
- Implement efficient data structures for quick tile lookup and updates
- Use a quadtree or similar spatial data structure for managing visible tiles

### 3.4 Mobile Considerations
- Implement touch controls for mobile devices
- Use responsive design principles for adaptable UI
- Consider using a PWA (Progressive Web App) approach for easy mobile deployment

## 4. Communication Protocol

### 4.1 WebSocket Messages
- Use JSON for message formatting
- Implement message compression for reduced data transfer

### 4.2 Message Types
1. Player Join
2. Tile Uncover Request
3. Tile Update
4. Player Status Update
5. Error Message

### 4.3 Real-time Updates
- Implement efficient delta updates to minimize data transfer
- Use binary protocols for time-critical data (e.g., player positions)

## 5. Security Considerations

### 5.1 Server-side Validation
- Validate all client actions server-side to prevent cheating
- Implement rate limiting to prevent DoS attacks

### 5.2 Authentication
- Implement a simple authentication system for persistent player identities

## 6. Testing Strategy

### 6.1 Server Testing
- Unit tests for core game logic
- Integration tests for database abstraction layer
- Load testing for concurrent player handling

### 6.2 Client Testing
- Unit tests for game state management and rendering logic
- Cross-browser testing
- Performance testing on various devices

## 7. Deployment and Monitoring

### 7.1 Server Deployment
- Use containerization (e.g., Docker) for easy deployment and scaling
- Implement a CI/CD pipeline for automated testing and deployment

### 7.2 Client Deployment
- Use a CDN for serving static assets
- Implement versioning for cache management

### 7.3 Monitoring and Logging
- Implement comprehensive logging on the server
- Use application performance monitoring (APM) tools for real-time insights
- Set up alerts for critical issues

This Technical Design Document provides a solid foundation for implementing the Infinite Multi-Player Online Minesweeper game. It covers the key aspects of both server and client architecture while considering scalability, performance, and future extensibility.


# Infinite Multi-Player Online Minesweeper MVP

## MVP Requirements

1. Large pre-generated game board (1000x1000 tiles)
2. Basic multiplayer functionality:
   - Join game
   - See other players' actions in real-time
3. Tile uncovering mechanic
4. Simple player identification (color-based)
5. Real-time updates of game state
6. Basic UI showing the game board and player score

## Implementation Plan (4 hours)

1. Server setup (45 minutes):
   - Initialize Rust project with WebSocket support
   - Implement basic game state structure (board, players)

2. Game logic (60 minutes):
   - Create function to generate large pre-filled board
   - Implement tile uncovering logic
   - Add player join and basic color assignment

3. WebSocket communication (45 minutes):
   - Set up WebSocket server
   - Implement message handling for player actions and state updates

4. Client-side setup (30 minutes):
   - Create HTML structure and basic CSS
   - Set up JavaScript WebSocket client

5. Client-side game rendering (60 minutes):
   - Implement canvas-based game board rendering
   - Add pan and zoom functionality

6. Game interactions (30 minutes):
   - Implement click-to-uncover functionality
   - Add real-time updates from other players

7. Final touches and testing (30 minutes):
   - Add basic UI elements (score, player color)
   - Perform basic functionality testing
   - Fix critical bugs if any

## Potential Challenges

- Efficiently rendering large game board on the client-side
- Ensuring smooth real-time updates with multiple players
- Balancing between game functionality and development time constraints
