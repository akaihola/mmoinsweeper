USER:

You are an expert prompt engineer. Your task is to deeply understand what I want, and in return respond with a well crafted prompt that, if fed to a separate AI, will get me exactly the result I want.

The prompt follows this rough outline, and makes sure to include each part as needed:

1. A persona. At the start, you write something to the affect of "Act as an expert in ..." This primes the LLM to respond from info relating to experts in the specific field.
2. The task. This part of the prompt involves exhaustively laying out the task for the LLM. It is critical this part is specific and clear. This is the most important part of the prompt.
3. Context. Make sure to include *any* context that is needed for the LLM to accurately, and reliably respond as needed.
4. Response format. Outline the ideal response format for this prompt.
5. Examples. This step is optional, but if examples would be beneficial, include them.
6. Input. If needed, leave a space in the prompt for any input data. This should be highlight between brackets [like this]

Some other important notes:
- Instruct the model to list out it's thoughts before giving an answer.
- If complex reasoning is required, include directions for the LLM to think step by step, and weigh all sides of the topic before settling on an answer.
- Where appropriate, make sure to utilize advanced prompt engineering techniques. These include, but are not limited to: Chain of Thought, Debate simulations, Self Reflection, and Self Consistency.
- Strictly use text, no code please

Please craft the perfect prompt for my request below

---

Write requirements and an implementation plan for an MVP of the game described in the game design and technical design documents below.
Come up with an absolute minimal proof-of-concept implementation plan with a minimal subset of features and doable in half a day.

# Game Design Document: Infinite Multi-Player Online Minesweeper

## 1. Game Concept
Infinite Multi-Player Online Minesweeper is a unique twist on the classic Minesweeper game. Players join a shared, infinite game board to uncover tiles and avoid mines in a persistent, ever-expanding world.

## 2. Core Gameplay Mechanics

### 2.1 Game Board
- The game board is infinite and shared among all players.
- The board consists of tiles that can be either empty or contain a mine.
- Empty tiles display the number of adjacent mines (1-8) or are blank if no adjacent mines.

### 2.2 Player Actions
- Players can uncover tiles that are diagonally or orthogonally adjacent to tiles they've already uncovered.
- Players cannot uncover tiles that have been revealed by other players.

### 2.3 Joining the Game
- New players can join the game at any time.
- Each new player is assigned a unique, internal running player number.
- New players start at a random, safe location on the board:
  - The starting tile and its eight adjacent tiles must be free of mines.
  - The starting position should be relatively close to recent player activity.
  - The starting position is automatically uncovered to give the player a safe area to begin exploring.

### 2.4 Player Identification
- The game client assigns different colors to players.
- Colors are chosen to ensure easy distinction between players in close proximity, the all-time top player, and the three best currently active players.

### 2.5 Losing Conditions
- A player loses if they uncover a mine.
- A player also loses if they have no more adjacent tiles to uncover.
- After losing, a player's uncovered tiles remain on the board.
- To continue playing, a lost player must re-join as a new player.

### 2.6 Game Continuity
- The game never ends.
- Players can join, play, lose, and re-join indefinitely.
- The game board persists and expands as players uncover more tiles.

## 3. User Interface

### 3.1 Main Game Screen
- Displays the infinite game board, initially centered on the randomly chosen starting position.
- Shows uncovered tiles with numbers indicating adjacent mines.
- Represents different players with unique colors.

### 3.2 Player Information
- Shows the color, leaderboard position (always "1.") and score (number of tiles uncovered) of the all-time top player.
- Shows the color, leaderboard position and score of the best currently active player.
- Shows the player's color, current leaderboard position and score.

### 3.3 Controls
- Tap or click to uncover a tile.
- Pinch-to-zoom or scroll wheel to adjust view scale.
- Drag to pan the view.

## 4. Technical Considerations

### 4.1 Multiplayer Synchronization
- Real-time updates of tile states across all connected clients.
- Efficient data transfer to handle potentially large numbers of simultaneous players.

### 4.2 Infinite Board Generation
- Procedural generation of the game board as players explore new areas.
- Consistent mine placement algorithm to ensure the same board state for all players.

### 4.3 Performance Optimization
- Efficient rendering of the visible portion of the infinite board.
- Load balancing to handle multiple players in different areas of the board.

This GDD provides a foundation for developing the Infinite Multi-Player Online Minesweeper game. As development progresses, this document can be expanded and refined to include more detailed specifications and additional features.


# Technical Design Document: Infinite Multi-Player Online Minesweeper

## 1. System Architecture Overview

The Infinite Multi-Player Online Minesweeper game consists of two main components:
1. Server: Implemented in Rust
2. Client: Implemented in pure web technologies (HTML, CSS, JavaScript)

Communication between the server and client will use a simple, efficient protocol over WebSocket connections.

## 2. Server Architecture

### 2.1 Technology Stack
- Language: Rust
- WebSocket Library: tokio-tungstenite
- Database Abstraction: trait-based approach for flexibility

### 2.2 Core Components

#### 2.2.1 WebSocket Server
- Handles client connections and message routing
- Manages player sessions

#### 2.2.2 Game State Manager
- Maintains the current state of the game
- Processes player actions
- Generates and manages the infinite minefield

#### 2.2.3 Database Abstraction Layer
- Provides an interface for data storage and retrieval
- Allows for easy switching between different storage backends

#### 2.2.4 Player Manager
- Handles player join/rejoin logic
- Manages player status and information

### 2.3 Data Models

#### 2.3.1 Minefield
- Random seed (u64): Used to generate the minefield

#### 2.3.2 Uncovered Tile
- Position: (i64, i64)
- Timestamp: u32
- Player number: u32

#### 2.3.3 Player
- Player number: u32
- Join timestamp: u32
- Status: enum (Active, Lost)
- Last activity timestamp: u32
- Last uncovered tile position: (i64, i64)
- Tiles uncovered count: u32

### 2.4 Algorithms

#### 2.4.1 Minefield Generation
- Use the random seed to deterministically generate mine positions
- Implement a chunking system for efficient infinite board management

#### 2.4.2 Player Positioning
- Implement an algorithm to find a safe starting position for new players
- Consider recent player activity when selecting the position

### 2.5 Scalability Considerations
- Design the first version so a single server scales as far as possible

#### 2.5.1 Scalability Future Considerations
- Keep options open for scaling in the future, for example:
  - Implement a sharding system for the game world
  - Use a distributed database for storing game state
  - Implement load balancing for handling multiple game servers

## 3. Client Architecture

### 3.1 Technology Stack
- HTML5 (for structure)
- CSS3 (for styling)
- JavaScript (ES6+, for logic and interactivity)
- Canvas API (for rendering the game board)

### 3.2 Core Components

#### 3.2.1 Game Board Renderer
- Efficiently renders the visible portion of the infinite board
- Implements zooming and panning functionality

#### 3.2.2 Input Handler
- Manages user interactions (clicks, touches, zooming, panning)
- Translates user actions into game commands

#### 3.2.3 WebSocket Client
- Manages real-time communication with the server
- Handles connection status and reconnection attempts

#### 3.2.4 Game State Manager
- Maintains the local game state
- Synchronizes with server updates

#### 3.2.5 UI Manager
- Handles the user interface elements (score display, status messages, etc.)
- Manages responsive layout for different screen sizes

### 3.3 Optimization Techniques

#### 3.3.1 Tile Rendering
- Implement tile caching to reduce redraw operations
- Use offscreen canvas for improved performance

#### 3.3.2 Data Management
- Implement efficient data structures for quick tile lookup and updates
- Use a quadtree or similar spatial data structure for managing visible tiles

### 3.4 Mobile Considerations
- Implement touch controls for mobile devices
- Use responsive design principles for adaptable UI
- Consider using a PWA (Progressive Web App) approach for easy mobile deployment

## 4. Communication Protocol

### 4.1 WebSocket Messages
- Use JSON for message formatting
- Implement message compression for reduced data transfer

### 4.2 Message Types
1. Player Join
2. Tile Uncover Request
3. Tile Update
4. Player Status Update
5. Error Message

### 4.3 Real-time Updates
- Implement efficient delta updates to minimize data transfer
- Use binary protocols for time-critical data (e.g., player positions)

## 5. Security Considerations

### 5.1 Server-side Validation
- Validate all client actions server-side to prevent cheating
- Implement rate limiting to prevent DoS attacks

### 5.2 Authentication
- Implement a simple authentication system for persistent player identities

## 6. Testing Strategy

### 6.1 Server Testing
- Unit tests for core game logic
- Integration tests for database abstraction layer
- Load testing for concurrent player handling

### 6.2 Client Testing
- Unit tests for game state management and rendering logic
- Cross-browser testing
- Performance testing on various devices

## 7. Deployment and Monitoring

### 7.1 Server Deployment
- Use containerization (e.g., Docker) for easy deployment and scaling
- Implement a CI/CD pipeline for automated testing and deployment

### 7.2 Client Deployment
- Use a CDN for serving static assets
- Implement versioning for cache management

### 7.3 Monitoring and Logging
- Implement comprehensive logging on the server
- Use application performance monitoring (APM) tools for real-time insights
- Set up alerts for critical issues

This Technical Design Document provides a solid foundation for implementing the Infinite Multi-Player Online Minesweeper game. It covers the key aspects of both server and client architecture while considering scalability, performance, and future extensibility.


ASSISTANT:

I understand you want a prompt that will generate requirements and an implementation plan for a minimal proof-of-concept (MVP) of the Infinite Multi-Player Online Minesweeper game, doable in half a day. I'll craft a prompt that will guide an AI to produce this output effectively. Here's the prompt:

Act as an expert game developer and project manager specializing in rapid prototyping of multiplayer online games. Your task is to create a minimal set of requirements and an implementation plan for a proof-of-concept version of an Infinite Multi-Player Online Minesweeper game. This MVP should be achievable within half a day of work.

Task:
1. Review the provided game design and technical design documents for the Infinite Multi-Player Online Minesweeper game.
2. Identify the core features that are absolutely essential for a minimal proof-of-concept.
3. Create a list of requirements for the MVP, focusing only on the most critical elements.
4. Develop a step-by-step implementation plan that can be completed in approximately 4 hours.
5. Highlight any potential challenges or risks that might arise during the rapid development process.

Context:
- The goal is to create a working prototype that demonstrates the key concept of the game, not a fully-featured product.
- The MVP should focus on the multiplayer aspect and the infinite board concept.
- Simplify complex features where possible to meet the half-day time constraint.
- Assume a single developer will be working on this project.

Response format:
1. MVP Requirements: List the minimal set of features required for the proof-of-concept.
2. Implementation Plan: Provide a step-by-step plan, with estimated time for each step, totaling approximately 4 hours.
3. Potential Challenges: Briefly mention any foreseeable issues that might arise during development.

Before providing your final answer, please list out your thoughts on:
- Which features from the original design are most critical for demonstrating the game's unique aspects?
- What simplifications can be made to complex systems (e.g., infinite board generation, player management) to fit the time constraint?
- How can the multiplayer aspect be demonstrated with minimal networking complexity?

Think step by step through these considerations, weighing the trade-offs between functionality and development time. After this thought process, provide your final MVP requirements and implementation plan.

[Input any additional specific requirements or constraints here, if necessary]


USER:

Act as an expert game developer and project manager specializing in rapid prototyping of multiplayer online games. Your task is to create a minimal set of requirements and an implementation plan for a proof-of-concept version of an Infinite Multi-Player Online Minesweeper game. This MVP should be achievable within half a day of work.

Task:
1. Review the provided game design and technical design documents for the Infinite Multi-Player Online Minesweeper game.
2. Identify the core features that are absolutely essential for a minimal proof-of-concept.
3. Create a list of requirements for the MVP, focusing only on the most critical elements.
4. Develop a step-by-step implementation plan that can be completed in approximately 4 hours.
5. Highlight any potential challenges or risks that might arise during the rapid development process.

Context:
- The goal is to create a working prototype that demonstrates the key concept of the game, not a fully-featured product.
- The MVP should focus on the multiplayer aspect and the infinite board concept.
- Simplify complex features where possible to meet the half-day time constraint.
- Assume a single developer will be working on this project.

Response format:
1. MVP Requirements: List the minimal set of features required for the proof-of-concept.
2. Implementation Plan: Provide a step-by-step plan, with estimated time for each step, totaling approximately 4 hours.
3. Potential Challenges: Briefly mention any foreseeable issues that might arise during development.

Before providing your final answer, please list out your thoughts on:
- Which features from the original design are most critical for demonstrating the game's unique aspects?
- What simplifications can be made to complex systems (e.g., infinite board generation, player management) to fit the time constraint?
- How can the multiplayer aspect be demonstrated with minimal networking complexity?

Think step by step through these considerations, weighing the trade-offs between functionality and development time. After this thought process, provide your final MVP requirements and implementation plan.

Here are the design documents:

# Game Design Document: Infinite Multi-Player Online Minesweeper

## 1. Game Concept
Infinite Multi-Player Online Minesweeper is a unique twist on the classic Minesweeper game. Players join a shared, infinite game board to uncover tiles and avoid mines in a persistent, ever-expanding world.

## 2. Core Gameplay Mechanics

### 2.1 Game Board
- The game board is infinite and shared among all players.
- The board consists of tiles that can be either empty or contain a mine.
- Empty tiles display the number of adjacent mines (1-8) or are blank if no adjacent mines.

### 2.2 Player Actions
- Players can uncover tiles that are diagonally or orthogonally adjacent to tiles they've already uncovered.
- Players cannot uncover tiles that have been revealed by other players.

### 2.3 Joining the Game
- New players can join the game at any time.
- Each new player is assigned a unique, internal running player number.
- New players start at a random, safe location on the board:
  - The starting tile and its eight adjacent tiles must be free of mines.
  - The starting position should be relatively close to recent player activity.
  - The starting position is automatically uncovered to give the player a safe area to begin exploring.

### 2.4 Player Identification
- The game client assigns different colors to players.
- Colors are chosen to ensure easy distinction between players in close proximity, the all-time top player, and the three best currently active players.

### 2.5 Losing Conditions
- A player loses if they uncover a mine.
- A player also loses if they have no more adjacent tiles to uncover.
- After losing, a player's uncovered tiles remain on the board.
- To continue playing, a lost player must re-join as a new player.

### 2.6 Game Continuity
- The game never ends.
- Players can join, play, lose, and re-join indefinitely.
- The game board persists and expands as players uncover more tiles.

## 3. User Interface

### 3.1 Main Game Screen
- Displays the infinite game board, initially centered on the randomly chosen starting position.
- Shows uncovered tiles with numbers indicating adjacent mines.
- Represents different players with unique colors.

### 3.2 Player Information
- Shows the color, leaderboard position (always "1.") and score (number of tiles uncovered) of the all-time top player.
- Shows the color, leaderboard position and score of the best currently active player.
- Shows the player's color, current leaderboard position and score.

### 3.3 Controls
- Tap or click to uncover a tile.
- Pinch-to-zoom or scroll wheel to adjust view scale.
- Drag to pan the view.

## 4. Technical Considerations

### 4.1 Multiplayer Synchronization
- Real-time updates of tile states across all connected clients.
- Efficient data transfer to handle potentially large numbers of simultaneous players.

### 4.2 Infinite Board Generation
- Procedural generation of the game board as players explore new areas.
- Consistent mine placement algorithm to ensure the same board state for all players.

### 4.3 Performance Optimization
- Efficient rendering of the visible portion of the infinite board.
- Load balancing to handle multiple players in different areas of the board.

This GDD provides a foundation for developing the Infinite Multi-Player Online Minesweeper game. As development progresses, this document can be expanded and refined to include more detailed specifications and additional features.

# Technical Design Document: Infinite Multi-Player Online Minesweeper

## 1. System Architecture Overview

The Infinite Multi-Player Online Minesweeper game consists of two main components:
1. Server: Implemented in Rust
2. Client: Implemented in pure web technologies (HTML, CSS, JavaScript)

Communication between the server and client will use a simple, efficient protocol over WebSocket connections.

## 2. Server Architecture

### 2.1 Technology Stack
- Language: Rust
- WebSocket Library: tokio-tungstenite
- Database Abstraction: trait-based approach for flexibility

### 2.2 Core Components

#### 2.2.1 WebSocket Server
- Handles client connections and message routing
- Manages player sessions

#### 2.2.2 Game State Manager
- Maintains the current state of the game
- Processes player actions
- Generates and manages the infinite minefield

#### 2.2.3 Database Abstraction Layer
- Provides an interface for data storage and retrieval
- Allows for easy switching between different storage backends

#### 2.2.4 Player Manager
- Handles player join/rejoin logic
- Manages player status and information

### 2.3 Data Models

#### 2.3.1 Minefield
- Random seed (u64): Used to generate the minefield

#### 2.3.2 Uncovered Tile
- Position: (i64, i64)
- Timestamp: u32
- Player number: u32

#### 2.3.3 Player
- Player number: u32
- Join timestamp: u32
- Status: enum (Active, Lost)
- Last activity timestamp: u32
- Last uncovered tile position: (i64, i64)
- Tiles uncovered count: u32

### 2.4 Algorithms

#### 2.4.1 Minefield Generation
- Use the random seed to deterministically generate mine positions
- Implement a chunking system for efficient infinite board management

#### 2.4.2 Player Positioning
- Implement an algorithm to find a safe starting position for new players
- Consider recent player activity when selecting the position

### 2.5 Scalability Considerations
- Design the first version so a single server scales as far as possible

#### 2.5.1 Scalability Future Considerations
- Keep options open for scaling in the future, for example:
  - Implement a sharding system for the game world
  - Use a distributed database for storing game state
  - Implement load balancing for handling multiple game servers

## 3. Client Architecture

### 3.1 Technology Stack
- HTML5 (for structure)
- CSS3 (for styling)
- JavaScript (ES6+, for logic and interactivity)
- Canvas API (for rendering the game board)

### 3.2 Core Components

#### 3.2.1 Game Board Renderer
- Efficiently renders the visible portion of the infinite board
- Implements zooming and panning functionality

#### 3.2.2 Input Handler
- Manages user interactions (clicks, touches, zooming, panning)
- Translates user actions into game commands

#### 3.2.3 WebSocket Client
- Manages real-time communication with the server
- Handles connection status and reconnection attempts

#### 3.2.4 Game State Manager
- Maintains the local game state
- Synchronizes with server updates

#### 3.2.5 UI Manager
- Handles the user interface elements (score display, status messages, etc.)
- Manages responsive layout for different screen sizes

### 3.3 Optimization Techniques

#### 3.3.1 Tile Rendering
- Implement tile caching to reduce redraw operations
- Use offscreen canvas for improved performance

#### 3.3.2 Data Management
- Implement efficient data structures for quick tile lookup and updates
- Use a quadtree or similar spatial data structure for managing visible tiles

### 3.4 Mobile Considerations
- Implement touch controls for mobile devices
- Use responsive design principles for adaptable UI
- Consider using a PWA (Progressive Web App) approach for easy mobile deployment

## 4. Communication Protocol

### 4.1 WebSocket Messages
- Use JSON for message formatting
- Implement message compression for reduced data transfer

### 4.2 Message Types
1. Player Join
2. Tile Uncover Request
3. Tile Update
4. Player Status Update
5. Error Message

### 4.3 Real-time Updates
- Implement efficient delta updates to minimize data transfer
- Use binary protocols for time-critical data (e.g., player positions)

## 5. Security Considerations

### 5.1 Server-side Validation
- Validate all client actions server-side to prevent cheating
- Implement rate limiting to prevent DoS attacks

### 5.2 Authentication
- Implement a simple authentication system for persistent player identities

## 6. Testing Strategy

### 6.1 Server Testing
- Unit tests for core game logic
- Integration tests for database abstraction layer
- Load testing for concurrent player handling

### 6.2 Client Testing
- Unit tests for game state management and rendering logic
- Cross-browser testing
- Performance testing on various devices

## 7. Deployment and Monitoring

### 7.1 Server Deployment
- Use containerization (e.g., Docker) for easy deployment and scaling
- Implement a CI/CD pipeline for automated testing and deployment

### 7.2 Client Deployment
- Use a CDN for serving static assets
- Implement versioning for cache management

### 7.3 Monitoring and Logging
- Implement comprehensive logging on the server
- Use application performance monitoring (APM) tools for real-time insights
- Set up alerts for critical issues

This Technical Design Document provides a solid foundation for implementing the Infinite Multi-Player Online Minesweeper game. It covers the key aspects of both server and client architecture while considering scalability, performance, and future extensibility.


ASSISTANT:

To approach this task, I'll think through the key considerations and then provide the MVP requirements and implementation plan.



Based on this analysis, here's the MVP plan:

1. MVP Requirements:
   - Large pre-generated game board (e.g., 1000x1000 tiles)
   - Basic multiplayer functionality (join game, see other players' actions)
   - Tile uncovering mechanic
   - Simple player identification (color-based)
   - Real-time updates of game state
   - Basic UI showing the game board and player score

2. Implementation Plan (approximately 4 hours):

   a. Server setup (45 minutes):
      - Initialize Rust project with WebSocket support
      - Implement basic game state structure (board, players)

   b. Game logic (60 minutes):
      - Create function to generate large pre-filled board
      - Implement tile uncovering logic
      - Add player join and basic color assignment

   c. WebSocket communication (45 minutes):
      - Set up WebSocket server
      - Implement message handling for player actions and state updates

   d. Client-side setup (30 minutes):
      - Create HTML structure and basic CSS
      - Set up JavaScript WebSocket client

   e. Client-side game rendering (60 minutes):
      - Implement canvas-based game board rendering
      - Add pan and zoom functionality

   f. Game interactions (30 minutes):
      - Implement click-to-uncover functionality
      - Add real-time updates from other players

   g. Final touches and testing (30 minutes):
      - Add basic UI elements (score, player color)
      - Perform basic functionality testing
      - Fix critical bugs if any

3. Potential Challenges:
   - Efficiently rendering large game board on the client-side
   - Ensuring smooth real-time updates with multiple players
   - Balancing between game functionality and development time constraints



# Infinite Multi-Player Online Minesweeper MVP

## MVP Requirements

1. Large pre-generated game board (1000x1000 tiles)
2. Basic multiplayer functionality:
   - Join game
   - See other players' actions in real-time
3. Tile uncovering mechanic
4. Simple player identification (color-based)
5. Real-time updates of game state
6. Basic UI showing the game board and player score

## Implementation Plan (4 hours)

1. Server setup (45 minutes):
   - Initialize Rust project with WebSocket support
   - Implement basic game state structure (board, players)

2. Game logic (60 minutes):
   - Create function to generate large pre-filled board
   - Implement tile uncovering logic
   - Add player join and basic color assignment

3. WebSocket communication (45 minutes):
   - Set up WebSocket server
   - Implement message handling for player actions and state updates

4. Client-side setup (30 minutes):
   - Create HTML structure and basic CSS
   - Set up JavaScript WebSocket client

5. Client-side game rendering (60 minutes):
   - Implement canvas-based game board rendering
   - Add pan and zoom functionality

6. Game interactions (30 minutes):
   - Implement click-to-uncover functionality
   - Add real-time updates from other players

7. Final touches and testing (30 minutes):
   - Add basic UI elements (score, player color)
   - Perform basic functionality testing
   - Fix critical bugs if any

## Potential Challenges

- Efficiently rendering large game board on the client-side
- Ensuring smooth real-time updates with multiple players
- Balancing between game functionality and development time constraints



This MVP plan focuses on the core aspects of the Infinite Multi-Player Online Minesweeper game while simplifying complex systems to fit within the 4-hour development constraint. It demonstrates the key concepts of multiplayer interaction and a large, shared game board, which can serve as a proof-of-concept for the full game design.

The implementation plan breaks down the development process into manageable steps, allocating time for both server-side and client-side development. By simplifying certain aspects like board generation and player management, we can create a functional prototype that showcases the game's unique features.

If you'd like me to elaborate on any part of the plan or discuss potential optimizations, please let me know.