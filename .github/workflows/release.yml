name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    types: [ opened, synchronize ]

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release

      - name: Generate Changelog
        run: |
          echo "# Changelog" > ${{ github.workspace }}-CHANGELOG.md
          echo "## ${{ github.ref_name }}" >> ${{ github.workspace }}-CHANGELOG.md
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" >> ${{ github.workspace }}-CHANGELOG.md

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Update version in static content and create archive
        run: |
          python .github/scripts/update_version.py

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.md
          files: |
            ./target/release/mmoinsweeper
            ${{ RUNNER_TEMP }}/mmoinsweeper-static-content.zip
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr_build_and_upload:
    name: PR Build and Upload
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release

      - name: Get branch name
        id: branch_name
        run: echo "::set-output name=branch::${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

      - name: Upload to production server
        env:
          HOST: ${{ secrets.PROD_HOST }}
          USER: ${{ secrets.PROD_SERVICE_USER }}
          KEY: ${{ secrets.PROD_SERVICE_USER_SSH_KEY }}
          BRANCH: ${{ steps.branch_name.outputs.branch }}
        run: |
          echo "$KEY" > ssh_key
          chmod 600 ssh_key
          scp -i ssh_key -o StrictHostKeyChecking=no ./target/release/mmoinsweeper $USER@$HOST:~/mmoinsweeper-$BRANCH
          rm ssh_key
